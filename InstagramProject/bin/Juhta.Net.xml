<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Juhta.Net</name>
    </assembly>
    <members>
        <member name="T:Juhta.Net.Common.BlockNotImplementedException">
            <summary>
            This exception will be thrown when the execution flow enters a block that is not implemented.
            </summary>
            <remarks>Generally it's a better idea to throw this kind of exception than to do nothing which can easily lead
            to weird or most probably error behaviour in the subsequent execution. This is especially true regarding code
            blocks that 'should' never be reached.</remarks>
            <seealso cref="T:Juhta.Net.Common.StatementNotImplementedException"/>
        </member>
        <member name="M:Juhta.Net.Common.BlockNotImplementedException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.BlockNotImplementedException.#ctor(System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="hint">Specifies a hint object.</param>
        </member>
        <member name="M:Juhta.Net.Common.BlockNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="hint">Specifies a hint string.</param>
        </member>
        <member name="T:Juhta.Net.Common.ClassId">
            <summary>
            <para>Defines a class identifier. A class identifier is a localhost file URI whose fragment part specifies a
            class name in a referenced library file.</para>
            <para>The fragment part can begin with a '~.' prefix indicating that the library file name specifies the root
            namespace of the class. If a library path is not absolute, the path will be filled according to the current
            directory.</para>
            <para>For example, the following values are valid class identifiers:</para>
            <list type="bullet">
            <item>
            <term><c>MyLibrary.dll#~.MyClass</c></term>
            </item>
            <item>
            <term><c>file:///MyLibrary.dll#~.MyClass</c></term>
            </item>
            <item>
            <term><c>file:///C:\MyDirectory\MyLibrary.dll#~.MyClass</c></term>
            </item>
            <item>
            <term><c>file:///C:\MyDirectory\MyLibrary.dll#MyNamespace.MyClass</c></term>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ClassId.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="classId">Specifies a class identifier as a string.</param>
        </member>
        <member name="M:Juhta.Net.Common.ClassId.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="classId">Specifies a class identifier as a string.</param>
            <param name="libraryDirectory">Specifies a library directory. Can be null. If non-null,
            <paramref name="classId"/> must not contain a library directory part.</param>
        </member>
        <member name="P:Juhta.Net.Common.ClassId.ClassName">
            <summary>
            Gets the name of the class associated with this <see cref="T:Juhta.Net.Common.ClassId"/> instance.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.ClassId.ClassNamespace">
            <summary>
            Gets the namespace of the class associated with this <see cref="T:Juhta.Net.Common.ClassId"/> instance.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.ClassId.FullClassName">
            <summary>
            Gets the full name of the class associated with this <see cref="T:Juhta.Net.Common.ClassId"/> instance.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.ClassId.LibraryDirectory">
            <summary>
            Gets the library directory of the class associated with this <see cref="T:Juhta.Net.Common.ClassId"/> instance.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.ClassId.LibraryFileName">
            <summary>
            Gets the library file name of the class associated with this <see cref="T:Juhta.Net.Common.ClassId"/> instance.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.ClassId.LibraryFilePath">
            <summary>
            Gets the library file path of the class associated with this <see cref="T:Juhta.Net.Common.ClassId"/> instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ClassId.m_className">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.ClassId.ClassName"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ClassId.m_classNamespace">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.ClassId.ClassNamespace"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ClassId.m_fullClassName">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.ClassId.FullClassName"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ClassId.m_libraryDirectory">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.ClassId.LibraryDirectory"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ClassId.m_libraryFileName">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.ClassId.LibraryFileName"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ClassId.m_libraryFilePath">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.ClassId.LibraryFilePath"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.CommonMessages">
            <summary>
            A static class that defines the common diagnostic messages.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.MessageFactory">
            <summary>
            Gets the <see cref="T:Juhta.Net.Diagnostics.DiagnosticMessageFactory"/> instance for creating diagnostic messages.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error001">
            <summary>
            Invalid '{0}' parameter value was passed to the method '{1}'. The value cannot be null.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error002">
            <summary>
            Value of the parameter '{0}' cannot be an empty string or a string containing nothing but white space
            characters.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error003">
            <summary>
            File '{0}' could not be locked within a {1} millisecond timeout.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error004">
            <summary>
            Portion of the file '{0}' could not be locked within a {1} millisecond timeout.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error005">
            <summary>
            Invalid '{0}' parameter value was passed to the method '{1}'. The value '{2}' does not conform to the
            regex pattern '{3}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error006">
            <summary>
            Method '{0}' of the class '{1}' cannot be executed because the current state of the instance doesn't allow
            it.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error007">
            <summary>
            File '{0}' does not exist.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error008">
            <summary>
            Directory '{0}' does not exist.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error009">
            <summary>
            Method '{0}' is not supported by the type '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error010">
            <summary>
            Property '{0}' is not supported by the type '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error011">
            <summary>
            An error occurred in the closing process of the library '{0}': {1}
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error012">
            <summary>
            Static method '{0}' of the class '{1}' cannot be executed because the current state of the class doesn't
            allow it.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error013">
            <summary>
            The lenghts of the arrays '{0}' and '{1}' do not match.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error014">
            <summary>
            Only one instance of the singleton class '{0}' is allowed to be created at a time.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error015">
            <summary>
            Property '{0}' of an instance of the class '{1}' cannot be executed because the instance has been disposed.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error016">
            <summary>
            Method '{0}' of an instance of the class '{1}' cannot be executed because the instance has been disposed.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error017">
            <summary>
            An instance of the class '{0}' could not be created because the type was not found in the assembly '{1}'.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.CommonMessages.Error018">
            <summary>
            Property '{0}' of the class '{1}' cannot be executed because the current state of the instance doesn't
            allow it.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.ConfigException">
            <summary>
            This exception will be thrown in a situation where execution cannot be continued for a reason that somehow
            depends on the currently effective configuration. This exception should not be thrown unless the error is
            avoidable by changing the configuration.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ConfigException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="T:Juhta.Net.Common.InterfaceNotSupportedException">
            <summary>
            This exception will be thrown when an object doesn't support a required interface.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InterfaceNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.Common.InterfaceNotSupportedException.#ctor(System.String,System.InvalidCastException)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an <see cref="T:System.InvalidCastException"/> instance that relates to the
            failed interface cast operation.</param>
        </member>
        <member name="T:Juhta.Net.Common.InternalException">
            <summary>
            This exception can be thrown when an error occurs in an application but no technical details are wanted to be
            exposed to the caller.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InternalException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InternalException.GetErrorMessage">
            <summary>
            Gets the general internal error message.
            </summary>
            <returns>Returns the general internal error message.</returns>
        </member>
        <member name="T:Juhta.Net.Common.InvalidConfigFileException">
            <summary>
            This exception will be thrown when a configuration file doesn't pass (schema) validation.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InvalidConfigFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.Common.InvalidConfigFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an inner exception.</param>
        </member>
        <member name="T:Juhta.Net.Common.InvalidConfigValueException">
            <summary>
            This exception will be thrown when a configuration file has passed (schema) validation but in further analysis
            an invalid configuration value is encountered.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.InvalidConfigValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="T:Juhta.Net.Common.ObjectFactory">
            <summary>
            A static class that provides services for creating instances of such classes whose type is not directly
            referencable in the current programming context. A typical scenario for using this class is to create instances
            of classes that are not available at the build time but are known to implement a specific interface.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an instance of a specified class by using the default constructor.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assembly">Specifies an <see cref="T:System.Reflection.Assembly"/> object.</param>
            <param name="className">Specifies a class name. The value can begin with a '~.' prefix in which case the
            root namespace for the class will be taken from the file name part of the <see cref="P:System.Reflection.Assembly.Location"/>
            property.</param>
            <returns>Returns the created instance casted to the specified type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.Reflection.Assembly,System.String,System.Object[])">
            <summary>
            Creates an instance of a specified class.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="assembly">Specifies an <see cref="T:System.Reflection.Assembly"/> object.</param>
            <param name="className">Specifies a class name. The value can begin with a '~.' prefix in which case the
            root namespace for the class will be taken from the file name part of the <see cref="P:System.Reflection.Assembly.Location"/>
            property.</param>
            <param name="parameters">Specifies an array of parameters that will be passed to the appropriate
            constructor. Can be null causing the default constructor to be called.</param>
            <returns>Returns the created instance casted to the specified type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.ClassId)">
            <summary>
            Creates an instance of a specified class by using the default constructor.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="classId">Specifies a <see cref="T:Juhta.Net.Common.ClassId"/> object.</param>
            <returns>Returns the created instance casted to the specified type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(Juhta.Net.Common.ClassId,System.Object[])">
            <summary>
            Creates an instance of a specified class.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="classId">Specifies a <see cref="T:Juhta.Net.Common.ClassId"/> object.</param>
            <param name="parameters">Specifies an array of parameters that will be passed to the appropriate
            constructor. Can be null causing the default constructor to be called.</param>
            <returns>Returns the created instance casted to the specified type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String)">
            <summary>
            Creates an instance of a specified class by using the default constructor.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="libraryFile">Specifies a library file. The value can have a directory part, either relative or
            absolute.</param>
            <param name="className">Specifies a class name. The value can begin with a '~.' prefix in which case the
            root namespace for the class will be taken from the file name part of <paramref name="libraryFile"/>.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectFactory.CreateInstance``1(System.String,System.String,System.Object[])">
            <summary>
            Creates an instance of a specified class.
            </summary>
            <typeparam name="T">Specifies a type for the return value. An instance to create must be castable to this
            type.</typeparam>
            <param name="libraryFile">Specifies a library file. The value can have a directory part, either relative or
            absolute.</param>
            <param name="className">Specifies a class name. The value can begin with a '~.' prefix in which case the
            root namespace for the class will be taken from the file name part of <paramref name="libraryFile"/>.</param>
            <param name="parameters">Specifies an array of parameters that will be passed to the appropriate
            constructor. Can be null causing the default constructor to be called.</param>
            <returns>Returns the created instance casted to the requested type.</returns>
        </member>
        <member name="T:Juhta.Net.Common.ObjectQueue`1">
            <summary>
            Represents a first-in, first-out queue for a generic object type. The queue implemented by this class is
            thread-safe, and it also blocks readers in case of an empty queue. This queue has especially been designed to
            act as a work queue in multi-threaded applications.
            </summary>
            <typeparam name="T">Specifies an object type.</typeparam>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.Close">
            <summary>
            Closes the object queue specified by this ObjectQueue instance. The operation releases all threads that are
            blocked by the current instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.GetObject">
            <summary>
            Gets the next object from the object queue specified by this ObjectQueue instance.
            </summary>
            <returns>Returns the next instance of <i>T</i> from the queue. The return value is null only, if the queue
            was initially empty and the queue had been closed prior to the call or no object became available before
            the queue was closed during the call.</returns>
        </member>
        <member name="M:Juhta.Net.Common.ObjectQueue`1.PutObject(`0)">
            <summary>
            Puts an object to the object queue specified by this ObjectQueue instance.
            </summary>
            <param name="object">Specifies an object.</param>
        </member>
        <member name="P:Juhta.Net.Common.ObjectQueue`1.Count">
            <summary>
            Gets the number of elements contained in the object queue specified by this ObjectQueue instance.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.ObjectQueue`1.WaitEvent">
            <summary>
            Defines an enumeration for wait events.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.WaitEvent.Close">
            <summary>
            Specifies the Close event.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.WaitEvent.Put">
            <summary>
            Specifies the Put event.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_closed">
            <summary>
            Specifies whether the object queue has been closed.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_eventWaitHandles">
            <summary>
            Specifies an array of EventWaitHandle objects related to this ObjectQueue instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_mutex">
            <summary>
            Specifies a Mutex object for synchronizing concurrent access to the object queue.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.ObjectQueue`1.m_objectQueue">
            <summary>
            Specifies the underlying Queue instance.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.OperatingSystemInfo">
            <summary>
            Defines a static class that provides information about the underlying operating system.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.OperatingSystemInfo.IsLinux">
            <summary>
            Returns true if the application is running on Linux, otherwise false.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.OperatingSystemInfo.IsMacOS">
            <summary>
            Returns true if the application is running on MacOS, otherwise false.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.OperatingSystemInfo.IsWindows">
            <summary>
            Returns true if the application is running on Windows, otherwise false.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.RegexPatterns">
            <summary>
            A static class that defines regular expression patterns.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegexPatterns.EmailAddress">
            <summary>
            Specifies a regular expression pattern for email addresses.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegexPatterns.EmailAddressList">
            <summary>
            Specifies a regular expression pattern for email address lists.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.RegexPatterns.FullClassName">
            <summary>
            Specifies a regular expression pattern for full class names.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.Singleton`1">
            <summary>
            Defines an abstract base class for singleton classes.
            </summary>
            <typeparam name="T">Specifies a type to make as singleton.</typeparam>
        </member>
        <member name="M:Juhta.Net.Common.Singleton`1.#cctor">
            <summary>
            Initializes the class.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.Singleton`1.Instance">
            <summary>
            Gets the singleton instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Singleton`1.ResetSingletonInstance">
            <summary>
            Sets a null value as the singleton instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Singleton`1.SetSingletonInstance(`0)">
            <summary>
            Sets a specified value as the singleton instance.
            </summary>
            <param name="instance">Specifies an instance of <typeparamref name="T"/> to be set as the singleton
            instance.</param>
        </member>
        <member name="F:Juhta.Net.Common.Singleton`1.s_instance">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Singleton`1.Instance"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Singleton`1.s_syncLock">
            <summary>
            Specifies a synchronization object for accessing the singleton instance.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.StatementNotImplementedException">
            <summary>
            This exception will be thrown when the execution flow enters a statement that is not implemented.
            </summary>
            <remarks>Generally it's a better idea to throw this kind of exception than to do nothing which can easily lead
            to weird or most probably error behaviour in the subsequent execution. This is especially true regarding
            statements that 'should' never be reached.</remarks>
            <seealso cref="T:Juhta.Net.Common.BlockNotImplementedException"/>
        </member>
        <member name="M:Juhta.Net.Common.StatementNotImplementedException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.StatementNotImplementedException.#ctor(System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="hint">Specifies a hint object.</param>
        </member>
        <member name="M:Juhta.Net.Common.StatementNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="hint">Specifies a hint string.</param>
        </member>
        <member name="T:Juhta.Net.Common.SymmetricCipher">
            <summary>
            Defines a class that simplifies the use of symmetric cryptographic service providers.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
            <remarks>Instances created with this constructor use the <see cref="T:System.Security.Cryptography.TripleDES"/> algorithm.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="symmetricAlgorithm">Specifies a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object.</param>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.DecryptData(System.String,System.Byte[])">
            <summary>
            Decrypts a specified array of bytes containing encrypted data.
            </summary>
            <param name="cipherKey">Specifies a cipher key.</param>
            <param name="encryptedData">Specifies an array of bytes containing encrypted data.</param>
            <returns>Returns an array of bytes containing the plain data.</returns>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.EncryptData(System.String,System.Byte[])">
            <summary>
            Encrypts a specified array of bytes containing plain data.
            </summary>
            <param name="cipherKey">Specifies a cipher key.</param>
            <param name="plainData">Specifies an array of bytes containing plain data.</param>
            <returns>Returns an array of bytes containing the encrypted data.</returns>
        </member>
        <member name="M:Juhta.Net.Common.SymmetricCipher.CreateKeyAndInitializationVector(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Creates a key and initialization vector based on a specified cipher key.
            </summary>
            <param name="cipherKey">Specifies a cipher key.</param>
            <param name="key">A byte array that returns the key for the specified cipher key.</param>
            <param name="iv">A byte array that returns the initialization vector for the specified cipher key.</param>
        </member>
        <member name="F:Juhta.Net.Common.SymmetricCipher.m_keySize">
            <summary>
            Specifies the key size to use with the associated <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object. The class
            determines the key size by selecting the maximum key size supported by <see cref="F:Juhta.Net.Common.SymmetricCipher.m_symmetricAlgorithm"/>.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.SymmetricCipher.m_symmetricAlgorithm">
            <summary>
            Specifies a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object that performs actual encryption and decryption
            operations.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.TimestampFactory">
            <summary>
            Defines a class for generating unique 21-digit timestamps. Timestamps will be returned in Coordinated Universal
            Time (UTC). An example of a timestamp is '201805282026441234567', generated on May 28, 2018 at 20:26:44.
            </summary>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.TimestampFactory.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.TimestampFactory.GetUniqueTimestamp">
            <summary>
            Gets a 21-digit unique timestamp.
            </summary>
            <returns>Returns the unique timestamp that was given to the calling thread.</returns>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_created">
            <summary>
            Specifies the time when this <see cref="T:Juhta.Net.Common.TimestampFactory"/> instance was created.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_lastTimestamp">
            <summary>
            Specifies the last timestamp that was returned from this <see cref="T:Juhta.Net.Common.TimestampFactory"/> instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_stopwatch">
            <summary>
            Measures the elapsed time since this <see cref="T:Juhta.Net.Common.TimestampFactory"/> instance was created.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.TimestampFactory.m_syncLock">
            <summary>
            Specifies a synchronization object for serializing concurrent access.
            </summary>
        </member>
        <member name="T:Juhta.Net.Common.UnexpectedException">
            <summary>
            This exception will be thrown when an unexpected error occurs.
            </summary>
            <remarks>An error is considered as unexpected when it occurs in a code context that doesn't contain error-prone
            functionality such as network communication or file I/O operations.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.UnexpectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies an error message.</param>
            <param name="innerException">Specifies an inner exception that determines the actual unexpected error.</param>
        </member>
        <member name="T:Juhta.Net.Common.Utf8FileWriter">
            <summary>
            Defines a writer class for UTF8-encoded files.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="filePath">Specifies the ablosute or a relative path of a UTF8-encoded file where data will be
            written. If the file already exists, it will be overwritten.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="filePath">Specifies the ablosute or a relative path of a UTF8-encoded file where data will be
            written.</param>
            <param name="openMode">Specifies how the UTF8-encoded file should be opened.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Close">
            <summary>
            Flushes all unwritten data to the underlying UTF8-encoded file, and after that, closes the file.
            </summary>
            <remarks>This method does nothing if the underlying UTF8-encoded file is not open.</remarks>
            <seealso cref="M:Juhta.Net.Common.Utf8FileWriter.Open"/>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.DecreaseIndentLevel">
            <summary>
            Decreases the current indent level by one.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Flush">
            <summary>
            Flushes all unwritten data to the underlying UTF8-encoded file.
            </summary>
            <remarks>This method does nothing if the underlying UTF8-encoded file is not open.</remarks>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.IncreaseIndentLevel">
            <summary>
            Increases the current indent level by one.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Open">
            <summary>
            Opens the underlying UTF8-encoded file.
            </summary>
            <remarks>
            <para>This method does nothing if the underlying UTF8-encoded file is already open.</para>
            <para>This method does not necessarily have to be called when writing data to the underlying UTF8-encoded
            file. If the file is not open, it will be automatically opened and closed in context of each write
            operation. However, recurrent openings and closings of the file might cause some performance loss. To gain
            the maximum performance, the file should be opened with an explicit call on this method prior to write
            operations. In this case, the file must also be explicitly closed with the <see cref="M:Juhta.Net.Common.Utf8FileWriter.Close"/> method.</para>
            </remarks>
            <seealso cref="M:Juhta.Net.Common.Utf8FileWriter.Close"/>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Write(System.String)">
            <summary>
            Writes a specified string to the underlying UTF8-encoded file.
            </summary>
            <param name="s">Specifies a string.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Write(System.String,System.Object[])">
            <summary>
            Writes a formatted string to the underlying UTF8-encoded file.
            </summary>
            <param name="format">Specifies a string containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="format"/>.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine">
            <summary>
            Writes a line terminator to the underlying UTF8-encoded file.
            </summary>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine(System.Int32)">
            <summary>
            Writes a specified number of line terminators to the underlying UTF8-encoded file.
            </summary>
            <param name="count">Specifies a number of line terminators to write.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine(System.String)">
            <summary>
            Writes a specified string followed by a line terminator to the underlying UTF8-encoded file.
            </summary>
            <param name="s">Specifies a string.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a formatted string followed by a line terminator to the underlying UTF8-encoded file.
            </summary>
            <param name="format">Specifies a string containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="format"/>.</param>
        </member>
        <member name="P:Juhta.Net.Common.Utf8FileWriter.FilePath">
            <summary>
            Gets the absolute path of the underlying UTF8-encoded file.
            </summary>
        </member>
        <member name="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel">
            <summary>
            Gets or sets the current indent level.
            </summary>
            <remarks>The result of the multiplication of <see cref="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel"/> and <see cref="P:Juhta.Net.Common.Utf8FileWriter.TabSize"/> determines
            the number of space characters to write at the beginning of each new line.</remarks>
            <seealso cref="P:Juhta.Net.Common.Utf8FileWriter.TabSize"/>
        </member>
        <member name="P:Juhta.Net.Common.Utf8FileWriter.TabSize">
            <summary>
            Gets or sets the current tab size.
            </summary>
            <seealso cref="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel"/>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.Write(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes data to the underlying UTF8-encoded file.
            </summary>
            <param name="endWithLineTerminator">If true, a line terminator will be written to the file after the data.</param>
            <param name="format">Specifies a string containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="format"/>. Can be null.</param>
        </member>
        <member name="M:Juhta.Net.Common.Utf8FileWriter.WriteLineTerminators(System.Int32)">
            <summary>
            Writes a specified number of line terminators to the underlying UTF8-encoded file.
            </summary>
            <param name="count">Specifies a number of line terminators to write.</param>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.c_defaultTabSize">
            <summary>
            Specifies the default tab size.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_atBeginningOfLine">
            <summary>
            Determines whether the file pointer of the underlying UTF8-encoded file is currently at the beginning of a
            line.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_filePath">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Utf8FileWriter.FilePath"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_fileWriter">
            <summary>
            Specifies a <see cref="T:System.IO.StreamWriter"/> object for writing data to the underlying UTF8-encoded file.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_indentLevel">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Utf8FileWriter.IndentLevel"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_openMode">
            <summary>
            Specifies the mode with which the underlying UTF8-encoded file must be opened for the first time. After the
            first opening, this field will be updated to <see cref="F:System.IO.FileMode.Append"/>.
            </summary>
        </member>
        <member name="F:Juhta.Net.Common.Utf8FileWriter.m_tabSize">
            <summary>
            Stores the <see cref="P:Juhta.Net.Common.Utf8FileWriter.TabSize"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Diagnostics.AlertMessage">
            <summary>
            Defines a class for alert messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.AlertMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.AlertMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Diagnostics.DiagnosticMessage">
            <summary>
            Defines an abstract base class for diagnostic messages. Diagnostic messages make it possible not to write long
            messages inside the actual code but centralize them in better manageable separate contexts.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])">
            <summary>
            Formats the message stored in this DiagnosticMessage instance with specified objects.
            </summary>
            <param name="args">Specifies an array of objects to format. Can be null.</param>
            <returns>Returns the formatted message. If the specified object array doesn't match the format items in the
            message stored in this DiagnosticMessage instance, the method just returns the message without any
            formatting.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId">
            <summary>
            Gets an integer identifier out of the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property of this DiagnosticMessage instance.
            </summary>
            <returns>Returns the greatest whole number fragment in the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property of this
            DiagnosticMessage instance as an integer. If there are no whole number fragments in the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/>
            property, the return value is zero.</returns>
            <seealso cref="M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)"/>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId(System.String)">
            <summary>
            Gets an integer identifier out of a specified string identifier.
            </summary>
            <param name="id">Specifies a string identifier.</param>
            <returns>Returns the greatest whole number fragment in the specified string identifier as an integer. If
            there are no whole number fragments in the string identifier, the return value is zero.</returns>
            <seealso cref="M:Juhta.Net.Diagnostics.DiagnosticMessage.GetIntegerId"/>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.GetMessage">
            <summary>
            Gets the message stored in this DiagnosticMessage instance without any formatting.
            </summary>
            <returns>Returns the stored message without any formatting.</returns>
            <remarks>Use this method instead of <see cref="M:Juhta.Net.Diagnostics.DiagnosticMessage.FormatMessage(System.Object[])"/> when the message contains no format items.</remarks>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.Exception,System.String@)">
            <summary>
            Tries to get an identifier for the message of a specified exception.
            </summary>
            <param name="exception">Specifies an exception.</param>
            <param name="messageId">If the function returns true, returns the identifier of the message of the
            specified exception, otherwise returns null.</param>
            <returns>Returns true if an identifier was found for the message of the specified exception, otherwise
            returns false.</returns>
            <remarks>
            <para>If the specified exception contains inner exceptions, the innermost exception with a found identifier
            match is decisive (root cause exception).</para>
            <para>Searching will be done in the last formatted messages for the current thread.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.TryGetMessageId(System.String,System.String@)">
            <summary>
            Tries to get an identifier for a specified message.
            </summary>
            <param name="message">Specifies a message.</param>
            <param name="messageId">If the function returns true, returns the identifier of the specified message,
            otherwise returns null.</param>
            <returns>Returns true if an identifier was found for the specified message, otherwise returns false.</returns>
            <remarks>Searching will be done in the last formatted messages for the current thread.</remarks>
        </member>
        <member name="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id">
            <summary>
            Gets the identifier of the diagnostic message that this DiagnosticMessage instance represents.
            </summary>
        </member>
        <member name="P:Juhta.Net.Diagnostics.DiagnosticMessage.Message">
            <summary>
            Gets the message associated with this DiagnosticMessage instance.
            </summary>
            <remarks>The value can contain format items.</remarks>
        </member>
        <member name="P:Juhta.Net.Diagnostics.DiagnosticMessage.Type">
            <summary>
            Gets the type of the diagnostic message that this DiagnosticMessage instance represents.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="type">Specifies a value for the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Type"/> property.</param>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.#ctor(Juhta.Net.Diagnostics.DiagnosticMessageType,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="type">Specifies a value for the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Type"/> property.</param>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.AddIdPrefix(System.String)">
            <summary>
            Adds the identifier of this diagnostic message as a prefix to a specified message.
            </summary>
            <param name="message">Specifies a message.</param>
            <returns>Returns the specified message prefixed by the identifier of this diagnostic message.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessage.SaveAsLastFormattedMessage(System.String)">
            <summary>
            Saves a specified message as a last formatted message for the current thread, and associates the current
            DiagnosticMessage instance with it.
            </summary>
            <param name="message">Specifies a message.</param>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessage.c_maxLastFormattedMessagesCount">
            <summary>
            Specifies the maximum length for the last formatted messages queue per thread.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessage.m_id">
            <summary>
            Stores the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessage.t_lastFormattedMessages">
            <summary>
            Specifies the thread-specific queue for the last formatted messages. Queue items are key/value pairs
            consisting of a formatted message and the corresponding DiagnosticMessage instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessage.m_message">
            <summary>
            Stores the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Message"/> property.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessage.m_type">
            <summary>
            Stores the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Type"/> property.
            </summary>
        </member>
        <member name="T:Juhta.Net.Diagnostics.DiagnosticMessageFactory">
            <summary>
            Represents a class that can be used to create instances of classes deriving from the <see cref="T:Juhta.Net.Diagnostics.DiagnosticMessage"/>
            class. The main benefit of using this class is automatic and consistent message identifier generation.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="messageIdBase">Specifies a base value for the message identifiers.</param>
            <param name="messageNamespace">Specifies a namespace for messages to create.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.#ctor(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="messageIdBase">Specifies a base value for the message identifiers.</param>
            <param name="informationMessageIdPrefix">Specifies a prefix for information message identifiers. Can be
            null.</param>
            <param name="warningMessageIdPrefix">Specifies a prefix for warning message identifiers. Can be null.</param>
            <param name="errorMessageIdPrefix">Specifies a prefix for error message identifiers. Can be null.</param>
            <param name="alertMessageIdPrefix">Specifies a prefix for alert message identifiers. Can be null.</param>
            <remarks>Identifiers of created diagnostic messages will start from <paramref name="messageIdBase"/> + 1 in
            ascending order.</remarks>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateAlertMessage(System.String)">
            <summary>
            Creates an <see cref="T:Juhta.Net.Diagnostics.AlertMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.AlertMessage"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateAlertMessage(System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Juhta.Net.Diagnostics.AlertMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <param name="messageIdOffset">Specifies an offset that determines the message identifier to associate with
            the <see cref="T:Juhta.Net.Diagnostics.AlertMessage"/> instance.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.AlertMessage"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateErrorMessage(System.String)">
            <summary>
            Creates an <see cref="T:Juhta.Net.Diagnostics.ErrorMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.ErrorMessage"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateErrorMessage(System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Juhta.Net.Diagnostics.ErrorMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <param name="messageIdOffset">Specifies an offset that determines the message identifier to associate with
            the <see cref="T:Juhta.Net.Diagnostics.ErrorMessage"/> instance.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.ErrorMessage"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateInformationMessage(System.String)">
            <summary>
            Creates an <see cref="T:Juhta.Net.Diagnostics.InformationMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.InformationMessage"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateInformationMessage(System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Juhta.Net.Diagnostics.InformationMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <param name="messageIdOffset">Specifies an offset that determines the message identifier to associate with
            the <see cref="T:Juhta.Net.Diagnostics.InformationMessage"/> instance.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.InformationMessage"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateWarningMessage(System.String)">
            <summary>
            Creates a <see cref="T:Juhta.Net.Diagnostics.WarningMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.WarningMessage"/> instance.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.DiagnosticMessageFactory.CreateWarningMessage(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:Juhta.Net.Diagnostics.WarningMessage"/> instance based on a specified message.
            </summary>
            <param name="message">Specifies a message. The message can contain format items.</param>
            <param name="messageIdOffset">Specifies an offset that determines the message identifier to associate with
            the <see cref="T:Juhta.Net.Diagnostics.WarningMessage"/> instance.</param>
            <returns>Returns the created <see cref="T:Juhta.Net.Diagnostics.WarningMessage"/> instance.</returns>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageFactory.m_alertMessageIdPrefix">
            <summary>
            Specifies the prefix for alert message identifiers.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageFactory.m_errorMessageIdPrefix">
            <summary>
            Specifies the prefix for error message identifiers.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageFactory.m_informationMessageIdPrefix">
            <summary>
            Specifies the prefix for information message identifiers.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageFactory.m_messageIdBase">
            <summary>
            Specifies the base value for the message identifiers.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageFactory.m_nextMessageId">
            <summary>
            Specifies the next message identifier (without a prefix).
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageFactory.m_warningMessageIdPrefix">
            <summary>
            Specifies the prefix for warning message identifiers.
            </summary>
        </member>
        <member name="T:Juhta.Net.Diagnostics.ErrorMessage">
            <summary>
            Defines a class for error messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ErrorMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ErrorMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Diagnostics.FileLogger">
            <summary>
            Defines a logger class that writes log events to a file.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="logFilePath">Specifies a log file path. The path can be relative or absolute. Can be null in
            which case the default log file path will be used. The default value will also be used if
            <paramref name="logFilePath"/> specifies somehow an invalid log file path.</param>
            <remarks>
            <para>The default log file will be written to the current user's temp folder with the process name.</para>
            <para>If the log file already exists, new rows will be appended to the end of the file.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogAlert(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogAlert(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(System.Exception)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(System.Exception,System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogInformation(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogInformation(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogWarning(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogWarning(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="P:Juhta.Net.Diagnostics.FileLogger.IsThreadSafe">
            <summary>
            See <see cref="P:Juhta.Net.Diagnostics.ILogger.IsThreadSafe"/>.
            </summary>
            <remarks>This logger is not thread-safe, we let the static <see cref="T:Juhta.Net.Diagnostics.Logger"/> class to take care of the
            synchronization.</remarks>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.EnsureLogTitle">
            <summary>
            Writes the title to the log file if such has not yet been written.
            </summary>
            <remarks>This method will also change the log file to its default value if the title cannot be written to
            the original log file.</remarks>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.GetDefaultLogFilePath">
            <summary>
            Gets the default log file path.
            </summary>
            <returns>Returns the default log file path.</returns>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.WriteLogEvent(Juhta.Net.Diagnostics.DiagnosticMessageType,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a log event to the underlying log file.
            </summary>
            <param name="messageType">Specifies a message type.</param>
            <param name="exception">Specifies an Exception object.</param>
            <param name="messageFormat">Specifies a message format containing zero or more format items.</param>
            <param name="args">Specifies an array of format objects corresponding the format items in
            <paramref name="messageFormat"/>. Can be null if <paramref name="messageFormat"/> contains no format items.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.FileLogger.WriteLogTitle">
            <summary>
            Writes the title to the underlying log file.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.FileLogger.c_logTitleFormat">
            <summary>
            Defines the log title format.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.FileLogger.c_tabSize">
            <summary>
            Defines the tab size for the log event message lines.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.FileLogger.m_logFilePath">
            <summary>
            Specifies the log file path. The path can be relative or absolute.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.FileLogger.m_logTitle">
            <summary>
            Specifies the log title. The value null means that the title has been written to the log file.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.FileLogger.m_processId">
            <summary>
            Specifies the ID of the process.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.FileLogger.m_processName">
            <summary>
            Specifies the name of the process.
            </summary>
        </member>
        <member name="T:Juhta.Net.Diagnostics.ILogger">
            <summary>
            Defines an interface for the loggers to be used with the framework.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)">
            <summary>
            Logs an alert event.
            </summary>
            <param name="message">Specifies an AlertMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogAlert(System.String)">
            <summary>
            Logs an alert event.
            </summary>
            <param name="message">Specifies an alert message.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])">
            <summary>
            Logs an alert event.
            </summary>
            <param name="message">Specifies an AlertMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogAlert(System.String,System.Object[])">
            <summary>
            Logs an alert event.
            </summary>
            <param name="messageFormat">Specifies an alert message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)">
            <summary>
            Logs an error event.
            </summary>
            <param name="message">Specifies an ErrorMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception)">
            <summary>
            Logs an error event.
            </summary>
            <param name="exception">Specifies an Exception object whose string representation determines the error
            message.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(System.String)">
            <summary>
            Logs an error event.
            </summary>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])">
            <summary>
            Logs an error event.
            </summary>
            <param name="message">Specifies an ErrorMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage)">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="message">Specifies an ErrorMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,System.String)">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="message">Specifies an error message.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(System.String,System.Object[])">
            <summary>
            Logs an error event.
            </summary>
            <param name="messageFormat">Specifies an error message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage,System.Object[])">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="message">Specifies an ErrorMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error event consisting of an error message and exception.
            </summary>
            <param name="exception">Specifies an Exception object.</param>
            <param name="messageFormat">Specifies an error message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)">
            <summary>
            Logs a diagnostic event.
            </summary>
            <param name="message">Specifies a DiagnosticMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])">
            <summary>
            Logs a diagnostic event.
            </summary>
            <param name="message">Specifies a DiagnosticMessage object whose Message property contains zero or more
            format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)">
            <summary>
            Logs an information event.
            </summary>
            <param name="message">Specifies an InformationMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogInformation(System.String)">
            <summary>
            Logs an information event.
            </summary>
            <param name="message">Specifies an information message.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])">
            <summary>
            Logs an information event.
            </summary>
            <param name="message">Specifies an InformationMessage object whose Message property contains zero or more
            format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogInformation(System.String,System.Object[])">
            <summary>
            Logs an information event.
            </summary>
            <param name="messageFormat">Specifies an information message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogWarning(System.String)">
            <summary>
            Logs a warning event.
            </summary>
            <param name="message">Specifies a warning message.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)">
            <summary>
            Logs a warning event.
            </summary>
            <param name="message">Specifies a WarningMessage object.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning event.
            </summary>
            <param name="messageFormat">Specifies a warning message format containing zero or more format items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.ILogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])">
            <summary>
            Logs a warning event.
            </summary>
            <param name="message">Specifies a WarningMessage object whose Message property contains zero or more format
            items.</param>
            <param name="args">Specifies an object array containing zero or more objects to format. These objects must
            correspond to the format items in the Message property of <paramref name="message"/>.</param>
        </member>
        <member name="P:Juhta.Net.Diagnostics.ILogger.IsThreadSafe">
            <summary>
            Returns true if this <see cref="T:Juhta.Net.Diagnostics.ILogger"/> instance is thread-safe, otherwise false.
            </summary>
        </member>
        <member name="T:Juhta.Net.Diagnostics.InformationMessage">
            <summary>
            Defines a class for information messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.InformationMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.InformationMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Diagnostics.Logger">
            <summary>
            Defines a static wrapper class for enabling easy logging through the encapsulated <see cref="T:Juhta.Net.Diagnostics.ILogger"/>
            instance.
            </summary>
            <remarks>
            <para>This class is also capable for serializing concurrent access to non-thread-safe <see cref="T:Juhta.Net.Diagnostics.ILogger"/>
            instances. In other words, this class is thread-safe excluding the <see cref="M:Juhta.Net.Diagnostics.Logger.SetLogger(Juhta.Net.Diagnostics.ILogger)"/> method.</para>
            <para>All exceptions thrown by the underlying <see cref="T:Juhta.Net.Diagnostics.ILogger"/> instance will be caught without handling,
            so no exceptions will be thrown by the class.</para>
            </remarks>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.#cctor">
            <summary>
            Initializes the class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogAlert(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(System.String)"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(Juhta.Net.Diagnostics.AlertMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogAlert(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogAlert(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(Juhta.Net.Diagnostics.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(Juhta.Net.Diagnostics.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(System.Exception)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(Juhta.Net.Diagnostics.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(System.Exception,System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,Juhta.Net.Diagnostics.ErrorMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogError(System.Exception,System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogEvent(Juhta.Net.Diagnostics.DiagnosticMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogInformation(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(Juhta.Net.Diagnostics.InformationMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogInformation(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogInformation(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogWarning(System.String)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(System.String)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage)"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogWarning(System.String,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])">
            <summary>
            See <see cref="M:Juhta.Net.Diagnostics.ILogger.LogWarning(Juhta.Net.Diagnostics.WarningMessage,System.Object[])"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.Logger.SetLogger(Juhta.Net.Diagnostics.ILogger)">
            <summary>
            Sets an <see cref="T:Juhta.Net.Diagnostics.ILogger"/> instance into the class.
            </summary>
            <param name="logger">Specifies an <see cref="T:Juhta.Net.Diagnostics.ILogger"/> object.</param>
        </member>
        <member name="F:Juhta.Net.Diagnostics.Logger.s_logger">
            <summary>
            Specifies the encapsulated <see cref="T:Juhta.Net.Diagnostics.ILogger"/> instance.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.Logger.s_syncLock">
            <summary>
            Specifies a synchronization object for serializing access to non-thread-safe logger instances.
            </summary>
        </member>
        <member name="T:Juhta.Net.Diagnostics.DiagnosticMessageType">
            <summary>
            Defines an enumeration for the diagnostic message types.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageType.Alert">
            <summary>
            The diagnostic message is an alert message.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageType.Error">
            <summary>
            The diagnostic message is an error message.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageType.Information">
            <summary>
            The diagnostic message is an information message.
            </summary>
        </member>
        <member name="F:Juhta.Net.Diagnostics.DiagnosticMessageType.Warning">
            <summary>
            The diagnostic message is a warning message.
            </summary>
        </member>
        <member name="T:Juhta.Net.Diagnostics.WarningMessage">
            <summary>
            Defines a class for warning messages.
            </summary>
        </member>
        <member name="M:Juhta.Net.Diagnostics.WarningMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
        </member>
        <member name="M:Juhta.Net.Diagnostics.WarningMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">Specifies a message that will be associated with the instance. The value can contain
            format items.</param>
            <param name="id">Specifies a value for the <see cref="P:Juhta.Net.Diagnostics.DiagnosticMessage.Id"/> property.</param>
        </member>
        <member name="T:Juhta.Net.Extensions.AppDomainExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.AppDomain"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.AppDomainExtensions.GetAssemblyByFileName(System.AppDomain,System.String)">
            <summary>
            Gets a loaded assembly by an assembly file name.
            </summary>
            <param name="appDomain">Specifies the current AppDomain instance.</param>
            <param name="assemblyFileName">Specifies an assembly file name.</param>
            <returns>Returns the first loaded Assembly instance whose Location property's file name part matches the
            specified assembly file name, or null, if no match was found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AppDomainExtensions.GetAssemblyByPath(System.AppDomain,System.String)">
            <summary>
            Gets a loaded assembly by an assembly path.
            </summary>
            <param name="appDomain">Specifies the current AppDomain instance.</param>
            <param name="assemblyPath">Specifies an assembly path.</param>
            <returns>Returns the first loaded Assembly instance whose Location property ends with the specified
            assembly path, or null, if no match was found.</returns>
            <remarks>The path specified by <paramref name="assemblyPath"/> does not necessarily have to be absolute.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.AppDomainExtensions.GetAssemblyByTypeName(System.AppDomain,System.String)">
            <summary>
            Gets a loaded assembly by a type name.
            </summary>
            <param name="appDomain">Specifies the current AppDomain instance.</param>
            <param name="typeName">Specifies a full type name.</param>
            <returns>Returns the first loaded assembly that contains the specified type, or null, if the type was not
            found in any loaded assembly.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.ArrayExtensions">
            <summary>
            Defines a static class containing extension methods for the <see cref="T:System.Array"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.ArrayExtensions.ToStringArray(System.Array)">
            <summary>
            Converts the current Array instance to a string array.
            </summary>
            <param name="array">Specifies the current Array instance.</param>
            <returns>Returns the current Array instance as a string array.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.AssemblyExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets the first attribute of a specified type from the current assembly.
            </summary>
            <typeparam name="TAttribute">Specifies an attribute type.</typeparam>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the first attribute of the specified type, or null, if no attributes of the specified type
            were found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            Gets the attributes of a specified type from the current assembly.
            </summary>
            <typeparam name="TAttribute">Specifies an attribute type.</typeparam>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the attributes of the specified type, or null, if no attributes of the specified type were
            found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetCompany(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Company attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Company attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetCopyright(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Copyright attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Copyright attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetDescription(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Description attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Description attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetDirectory(System.Reflection.Assembly)">
            <summary>
            Gets the directory of the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the directory of the current assembly without an ending directory separator.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetFileName(System.Reflection.Assembly)">
            <summary>
            Gets the file name of the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the file name of the current assembly.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetFileNameWithoutExtension(System.Reflection.Assembly)">
            <summary>
            Gets the file name of the current assembly without the extension.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the file name of the current assembly without the extension.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetProduct(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Product attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Product attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            Gets the product version associated with the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the product version associated with the current assembly.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetTitle(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Title attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Title attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.GetVersion(System.Reflection.Assembly)">
            <summary>
            Gets the value of the current assembly's Version attribute.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <returns>Returns the value of the Version attribute, or null, if the attibute was not found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.LoadEmbeddedResourceFile(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an embedded resource file from the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <param name="fileName">Specifies the name of a resource file to be loaded.</param>
            <returns>Returns the contents of the requested resource file.</returns>
            <remarks>This method loads the first resource file whose name matches the specified file name regardless of
            the file namespace.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.AssemblyExtensions.LoadEmbeddedResourceFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Loads an embedded resource file from the current assembly.
            </summary>
            <param name="assembly">Specifies the current assembly.</param>
            <param name="fileName">Specifies the name of a resource file to be loaded.</param>
            <param name="fileNamespace">Specifies the namespace of a resource file to be loaded. Can be null in which
            case the method loads the first resource file whose name matches the specified file name.</param>
            <returns>Returns the contents of the requested resource file.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.DateTimeExtensions">
            <summary>
            Defines a static class containing extension methods for the <see cref="T:System.DateTime"/> structure.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToDigitTimestamp(System.DateTime)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent 21-digit timestamp.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <returns>Returns the value of the current DateTime instance as a 21-digit timestamp.</returns>
            <remarks>Digit timestamps contain no separators between the timestamp parts. The number of digits
            expressing fractional seconds is 7.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime,System.Char)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <param name="dateTimeSeparator">Specifies a character that is used to separate the date and time part in
            the timestamp.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime,System.Char,System.Boolean)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <param name="dateTimeSeparator">Specifies a character that is used to separate the date and time part in
            the timestamp.</param>
            <param name="addFractionalSeconds">If true, adds fractional seconds to the timestamp.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Converts the value of the current DateTime instance to an equivalent timestamp string.
            </summary>
            <param name="dateTime">Specifies the current DateTime instance.</param>
            <param name="dateTimeSeparator">Specifies a character that is used to separate the date and time part in
            the timestamp.</param>
            <param name="addFractionalSeconds">If true, adds fractional seconds to the timestamp.</param>
            <param name="addUtcOffset">If true, adds the offset to Coordinated Universal Time to the timestamp.</param>
            <returns>Returns the value of the current DateTime instance as a timestamp string.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.EventHandlerExtensions">
            <summary>
            Defines a static class containing extension methods for the <see cref="T:System.EventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.EventHandlerExtensions.RaiseEvent(System.EventHandler,System.Object)">
            <summary>
            Raises the event specified by this EventHandler delegate.
            </summary>
            <param name="eventHandler">Specifies the current EventHandler delegate.</param>
            <param name="sender">Specifies an event source.</param>
        </member>
        <member name="M:Juhta.Net.Extensions.EventHandlerExtensions.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event specified by this EventHandler delegate.
            </summary>
            <typeparam name="TEventArgs">Specifies the type of the event data.</typeparam>
            <param name="eventHandler">Specifies the current EventHandler delegate.</param>
            <param name="sender">Specifies an event source.</param>
            <param name="eventArgs">Specifies an object containing the event data.</param>
        </member>
        <member name="T:Juhta.Net.Extensions.FileStreamExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.IO.FileStream"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.Lock(System.IO.FileStream,System.Int32)">
            <summary>
            Locks the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.Lock(System.IO.FileStream,System.Int64,System.Int64,System.Int32)">
            <summary>
            Locks a range of the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="position">Specifies the position of a range to lock.</param>
            <param name="length">Specifies the length in bytes of a range to lock.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.TryLock(System.IO.FileStream,System.Int32)">
            <summary>
            Tries to lock the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
            <returns>Returns true if a lock to the file was aqcuired within the specified timeout, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.FileStreamExtensions.TryLock(System.IO.FileStream,System.Int64,System.Int64,System.Int32)">
            <summary>
            Tries to lock a range of the file specified by this FileStream instance.
            </summary>
            <param name="fileStream">Specifies the current FileStream instance.</param>
            <param name="position">Specifies the position of a range to lock.</param>
            <param name="length">Specifies the length in bytes of a range to lock.</param>
            <param name="timeout">Specifies a timeout in milliseconds for the operation.</param>
            <returns>Returns true if a lock to the range of the file was aqcuired within the specified timeout,
            otherwise false.</returns>
        </member>
        <member name="T:Juhta.Net.Extensions.StringExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ContainsWhitespaces(System.String)">
            <summary>
            Checks whether this string contains white space characters.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns true if this string contains white space characters, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.EnsureEnd(System.String,System.String)">
            <summary>
            Ensures this string to end with a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string with which this string is ensured to end with.</param>
            <returns>Returns such copy of this string that ends with <paramref name="end"/>.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.EnsureEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Ensures this string to end with a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string with which this string is ensured to end with.</param>
            <param name="stringComparison">Specifies a StringComparison value.</param>
            <returns>Returns such copy of this string that ends with <paramref name="end"/>.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.FromBase64String(System.String)">
            <summary>
            Converts this base64 string to its equivalent string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns the string representation of this base64 string.</returns>
            <remarks>This method performs string conversions through the UTF-8 encoding.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.IsRegexMatch(System.String,System.String)">
            <summary>
            Checks whether a specified regular expression pattern matches this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="pattern">Specifies a regular expression pattern.</param>
            <returns>Returns true if the specified regular expression pattern matches this string, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveEnd(System.String,System.String)">
            <summary>
            Removes a specified end from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string that will be removed from the end of this string.</param>
            <returns>Returns such copy of this string from which the specified end has been removed. If this string
            doesn't end with the specified end, returns a copy of this string.</returns>
            <remarks>This method is case-sensitive.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Removes a specified end from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="end">Specifies a string that will be removed from the end of this string.</param>
            <param name="stringComparison">Specifies a StringComparison value.</param>
            <returns>Returns such copy of this string from which the specified end has been removed. If this string
            doesn't end with the specified end, returns a copy of this string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveStart(System.String,System.String)">
            <summary>
            Removes a specified start from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="start">Specifies a string that will be removed from the start of this string.</param>
            <returns>Returns such copy of this string from which the specified start has been removed. If this string
            doesn't start with the specified start, returns a copy of this string.</returns>
            <remarks>This method is case-sensitive.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.RemoveStart(System.String,System.String,System.StringComparison)">
            <summary>
            Removes a specified start from this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="start">Specifies a string that will be removed from the start of this string.</param>
            <param name="stringComparison">Specifies a StringComparison value.</param>
            <returns>Returns such copy of this string from which the specified start has been removed. If this string
            doesn't start with the specified start, returns a copy of this string.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ReplaceHtmlSpecialCharacters(System.String)">
            <summary>
            Replaces all HTML special characters with their corresponding entities in this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns such copy of this string where all occurrences of HTML special characters have been
            replaced with their corresponding entities.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ReplaceXmlSpecialCharacters(System.String)">
            <summary>
            Replaces all XML special characters with their corresponding entities in this string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns such copy of this string where all occurrences of XML special characters have been
            replaced with their corresponding entities.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringAfter(System.String,System.Char,System.StringComparison)">
            <summary>
            Gets a substring from this string after the first occurrence of a specified character.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a character to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string after the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringAfter(System.String,System.String,System.StringComparison)">
            <summary>
            Gets a substring from this string after the first occurrence of a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a string to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string after the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringBefore(System.String,System.Char,System.StringComparison)">
            <summary>
            Gets a substring from this string before the first occurrence of a specified character.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a character to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string before the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.SubstringBefore(System.String,System.String,System.StringComparison)">
            <summary>
            Gets a substring from this string before the first occurrence of a specified string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <param name="value">Specifies a string to find.</param>
            <param name="comparison">Specifies a comparison mode.</param>
            <returns>If <paramref name="value"/> is found within the current string, returns the substring from the
            current string before the first occurrence of <paramref name="value"/>. If <paramref name="value"/> is not
            found, returns the current string; this will be done also when <paramref name="value"/> is null or empty.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ToBase64String(System.String)">
            <summary>
            Converts this string to its equivalent base64 string.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns the base64 string representation of this string.</returns>
            <remarks>This method performs base64 string conversions through the UTF-8 encoding.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.StringExtensions.ToBoolean(System.String)">
            <summary>
            Converts this string to an equivalent <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="s">Specifies the current string instance.</param>
            <returns>Returns this string as an equivalent <see cref="T:System.Boolean"/> value.</returns>
            <remarks>This method is otherwise equivalent to <see cref="M:System.Convert.ToBoolean(System.String)"/>, but it also
            accepts the values "1" and "0" as valid string representatives for the boolean values True and False,
            respectively.</remarks>
        </member>
        <member name="T:Juhta.Net.Extensions.XmlNodeExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.Xml.XmlNode"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String)">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="childName">Specifies a name for the child node.</param>
            <returns>Returns the appended child node.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="childName">Specifies a name for the child node.</param>
            <param name="childInnerText">Specifies an inner text for the child node.</param>
            <returns>Returns the appended child node.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="qualifiedChildName">Specifies a qualified name for the child node.</param>
            <param name="namespaceUri">Specifies a namespace URI for the child node.</param>
            <param name="innerText">Specifies an inner text for the child node. Can be null.</param>
            <returns>Returns the appended child node.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.AppendChild(System.Xml.XmlNode,System.String,System.String,System.String[],System.String[])">
            <summary>
            Appends a child node to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="childName">Specifies a name for the child node.</param>
            <param name="childInnerText">Specifies an inner text for the child node. Can be null.</param>
            <param name="attributeNames">A string array specifying names for the attributes to be added to the child
            node. Can be null.</param>
            <param name="attributeValues">A string array specifying values for the attributes to be added to the child
            node. This parameter will be ignored if <paramref name="attributeNames"/> is null.</param>
            <returns>Returns the appended child node.</returns>
            <remarks>The lengths of the arrays <paramref name="attributeNames"/> and <paramref name="attributeValues"/>
            must match.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.CopyTo(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Copies the current node to another node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="destination">Specifies a destination node.</param>
            <remarks>Copying covers all attributes and child nodes.</remarks>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an attribute value from the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies an attribute name.</param>
            <returns>Returns the value of the specified attribute or an empty string, if the attribute wasn't found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets an attribute value from the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies an attribute name.</param>
            <param name="defaultValue">Specifies a default value for the attribute.</param>
            <returns>Returns the value of the specified attribute or the default value, if the attribute wasn't found.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.HasAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Checks whether the current node has a specified attribute.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies an attribute name.</param>
            <returns>Returns true if the current node has the specified attribute, otherwise false.</returns>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets an attribute to the current node.
            </summary>
            <param name="node">Specifies the current node.</param>
            <param name="name">Specifies a name for the attribute to be set.</param>
            <param name="value">Specifies a value for the attribute to be set.</param>
            <remarks>If the attribute already exists the function just updates its value.</remarks>
        </member>
        <member name="T:Juhta.Net.Extensions.XmlSchemaExtensions">
            <summary>
            A static class that contains extension methods for the <see cref="T:System.Xml.Schema.XmlSchema"/> class.
            </summary>
        </member>
        <member name="M:Juhta.Net.Extensions.XmlSchemaExtensions.GetAttributeDefaultValue(System.Xml.Schema.XmlSchema,System.String,System.String)">
            <summary>
            Gets an attribute's default value from the current XmlSchema instance.
            </summary>
            <param name="schema">Specifies the current XmlSchema object.</param>
            <param name="complexTypeName">Specifies the name of a complex type containing the attribute.</param>
            <param name="attributeName">Specifies an attribute name.</param>
            <returns>Returns the default value of the attribute or null if the complex type or the attribute has not
            been defined in the schema.</returns>
        </member>
        <member name="T:Juhta.Net.Framework.DiagnosticMessageIdBase">
            <summary>
            A static class that provides properties to get diagnostic message identifier bases for the common messages and
            framework libraries.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.DiagnosticMessageIdBase.Common">
            <summary>
            Gets the message identifier base for the common messages.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.DiagnosticMessageIdBase.Console">
            <summary>
            Gets the message identifier base for the Console library.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.DiagnosticMessageIdBase.Core">
            <summary>
            Gets the message identifier base for the Core library.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.DiagnosticMessageIdBase.LibraryManagement">
            <summary>
            Gets the message identifier base for the LibraryManagement library.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.DiagnosticMessageIdBase.Services">
            <summary>
            Gets the message identifier base for the Services library.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.DiagnosticMessageIdBase.Startup">
            <summary>
            Gets the message identifier base for the Startup library.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.DiagnosticMessageIdBase.Validation">
            <summary>
            Gets the message identifier base for the Validation library.
            </summary>
        </member>
        <member name="M:Juhta.Net.Framework.DiagnosticMessageIdBase.GetMessageIdBase(Juhta.Net.Framework.FrameworkLibraryType)">
            <summary>
            Gets the message identifier base for a specified framework library.
            </summary>
            <param name="libraryType">Specifies a framework library type.</param>
            <returns>Returns the message identifier base for the specified framework library.</returns>
        </member>
        <member name="F:Juhta.Net.Framework.DiagnosticMessageIdBase.c_commonMessageIdBase">
            <summary>
            Defines the message identifier base for the common messages.
            </summary>
        </member>
        <member name="T:Juhta.Net.Framework.FrameworkConfig">
            <summary>
            A static class providing common methods and properties related to configuration files of the framework
            libraries.
            </summary>
        </member>
        <member name="M:Juhta.Net.Framework.FrameworkConfig.CreateNamespaceManager(System.String,System.Xml.XmlNode,System.String)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNamespaceManager"/> object corresponding to a specified framework library, XML
            configuration and schema version.
            </summary>
            <param name="libraryFileName">Specifies a framework library file name.</param>
            <param name="anyConfigNode">Specifies an <see cref="T:System.Xml.XmlNode"/> object containing in a library
            configuration.</param>
            <param name="schemaVersion">Specifies the schema version of the library configuration.</param>
            <returns>Returns the created <see cref="T:System.Xml.XmlNamespaceManager"/> object specified by the parameters.</returns>
        </member>
        <member name="M:Juhta.Net.Framework.FrameworkConfig.GetEmbeddedCommonConfigSchema">
            <summary>
            Gets the embedded schema for the common configuration.
            </summary>
            <returns>Returns the embedded schema for the common configuration.</returns>
        </member>
        <member name="M:Juhta.Net.Framework.FrameworkConfig.GetEmbeddedConfigSchema(System.Reflection.Assembly)">
            <summary>
            Gets the default embedded configuration schema from a specified assembly.
            </summary>
            <param name="containingAssembly">Specifies an assembly where the default embedded configuration schema will
            be searched for.</param>
            <returns>Returns the default embedded configuration schema from the specified assembly.</returns>
        </member>
        <member name="M:Juhta.Net.Framework.FrameworkConfig.GetEmbeddedConfigSchema(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets an embedded configuration schema from a specified assembly.
            </summary>
            <param name="containingAssembly">Specifies an assembly where an embedded configuration schema will be
            searched for.</param>
            <param name="configSchemaFileNamespace">Specifies the file namespace of an embedded configuration schema.</param>
            <param name="configSchemaFileName">Specifies the file name of an embedded configuration schema.</param>
            <returns>Returns the embedded configuration schema from the specified assembly corresponding to the
            specified file namespace and name.</returns>
        </member>
        <member name="M:Juhta.Net.Framework.FrameworkConfig.GetLibraryConfigXmlns(System.String,System.String)">
            <summary>
            Gets the configuration schema namespace for a framework library.
            </summary>
            <param name="libraryFileName">Specifies a framework library file name.</param>
            <param name="schemaVersion">Specifies a schema version.</param>
            <returns>Returns the configuration schema namespace for the specified framework library.</returns>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkConfig.CommonConfigSchemaFileName">
            <summary>
            Gets the file name of the common configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkConfig.CommonConfigSchemaFileNamespace">
            <summary>
            Gets the file namespace of the common configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkConfig.CommonConfigSchemaVersion">
            <summary>
            Gets the version of the common configuration XML schema.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkConfig.RootXmlns">
            <summary>
            Gets the root XML namespace for the configuration schemas of the framework libraries.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkConfig.c_commonConfigFileName">
            <summary>
            Defines the file name of the common configuration XML schema.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkConfig.c_commonConfigSchemaVersion">
            <summary>
            Defines the version of the common configuration XML schema.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkConfig.c_rootXmlns">
            <summary>
            Defines the root XML namespace for the configuration schemas of the framework libraries.
            </summary>
        </member>
        <member name="T:Juhta.Net.Framework.FrameworkInfo">
            <summary>
            A static class that provides read-only information about the framework.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkInfo.BinDirectory">
            <summary>
            Gets the directory of the framework binaries.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkInfo.Copyright">
            <summary>
            Gets the copyright of the framework.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkInfo.FrameworkName">
            <summary>
            Gets the name of the framework.
            </summary>
        </member>
        <member name="P:Juhta.Net.Framework.FrameworkInfo.RootNamespace">
            <summary>
            Gets the root namespace of the framework.
            </summary>
        </member>
        <member name="T:Juhta.Net.Framework.FrameworkLibraryType">
            <summary>
            Defines an enumeration for the framework library types.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkLibraryType.Core">
            <summary>
            Specifies the Core library.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkLibraryType.Validation">
            <summary>
            Specifies the Validation library.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkLibraryType.Console">
            <summary>
            Specifies the Console library.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkLibraryType.LibraryManagement">
            <summary>
            Specifies the Library Management library.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkLibraryType.Services">
            <summary>
            Specifies the Services library.
            </summary>
        </member>
        <member name="F:Juhta.Net.Framework.FrameworkLibraryType.Startup">
            <summary>
            Specifies the Startup library.
            </summary>
        </member>
        <member name="T:Juhta.Net.Helpers.ArgumentHelper">
            <summary>
            Defines a static helper class that provides methods for simplifying common argument operations such as
            null-checking and value validations. These helper methods enable replacing of repetitive code blocks with
            one-liners.
            </summary>
        </member>
        <member name="M:Juhta.Net.Helpers.ArgumentHelper.CheckNull(System.String,System.Object)">
            <summary>
            Checks whether a parameter value is null, and if so, throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">Specifies a parameter name.</param>
            <param name="paramValue">Specifies a parameter value.</param>
        </member>
        <member name="M:Juhta.Net.Helpers.ArgumentHelper.CheckValue(System.String,System.String,System.String)">
            <summary>
            Checks whether a parameter value conforms to a regex pattern, and if it doesn't, throws an
            <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">Specifies a parameter name.</param>
            <param name="paramValue">Specifies a parameter value.</param>
            <param name="regexPattern">Specifies a regex pattern.</param>
        </member>
        <member name="M:Juhta.Net.Helpers.ArgumentHelper.GetCallingMethod(System.Diagnostics.StackFrame)">
            <summary>
            Gets the full method name related to a specified <see cref="T:System.Diagnostics.StackFrame"/> object.
            </summary>
            <param name="stackFrame">Specifies a <see cref="T:System.Diagnostics.StackFrame"/> object.</param>
            <returns>Returns the full method name related to the specified <see cref="T:System.Diagnostics.StackFrame"/> object.</returns>
            <remarks>Full method name means a full type name plus a method name in this context.</remarks>
        </member>
        <member name="T:Juhta.Net.Helpers.StackTraceHelper">
            <summary>
            Defines a static helper class that facilitates getting call stacks through <see cref="T:System.Diagnostics.StackTrace"/>.
            </summary>
        </member>
        <member name="M:Juhta.Net.Helpers.StackTraceHelper.GetCallStack(System.Int32)">
            <summary>
            Gets the current call stack.
            </summary>
            <param name="skipFrames">Specifies the number of stack frames to skip.</param>
            <returns>Returns an array of string each of which representing one line in the call stack from top to
            bottom.</returns>
            <remarks>If you want to ignore the first line in the call stack caused by the call to this method, pass 1
            as a value of <paramref name="skipFrames"/>.</remarks>
        </member>
        <member name="M:Juhta.Net.Helpers.StackTraceHelper.AppendGenericTypes(System.Text.StringBuilder,System.Type[])">
            <summary>
            Appends a list of generic types to a call stack line.
            </summary>
            <param name="callStackLine">Specifies a call stack line.</param>
            <param name="genericTypes">Specifies an array of generic types. Can be null or an empty array in which case
            the method returns immediately.</param>
        </member>
        <member name="T:Juhta.Net.LibraryMessages">
            <summary>
            A static class that defines the diagnostic messages for this library.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.MessageFactory">
            <summary>
            Gets the <see cref="T:Juhta.Net.Diagnostics.DiagnosticMessageFactory"/> instance for creating diagnostic messages.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error001">
            <summary>
            The call stack could not be listed.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error024">
            <summary>
            Separate library directory '{0}' cannot be specified to construct an instance of ClassId because the value
            '{1}' already contains a library directory part.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error031">
            <summary>
            Execution flow entered a block that is not implemented (hint: {0}).
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error034">
            <summary>
            Value '{0}' is not a valid class identifier because the fragment part of the file URI is missing or empty.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error035">
            <summary>
            Value '{0}' is not a valid class identifier because the file URI doesn't specify a '.DLL' file.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error036">
            <summary>
            Value '{0}' is not a valid class identifier because the fragment part of the file URI doesn't specify a
            valid class name.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error038">
            <summary>
            Value '{0}' is not a valid class identifier because its file path is invalid.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error046">
            <summary>
            Execution flow entered a statement that is not implemented (hint: {0}).
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error048">
            <summary>
            Class identifier must be a localhost file URI.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error054">
            <summary>
            File '{0}' could not be locked within {1} milliseconds.
            </summary>
        </member>
        <member name="F:Juhta.Net.LibraryMessages.Error055">
            <summary>
            Range between positions {0} - {1} in the file '{2}' could not be locked within {3} milliseconds.
            </summary>
        </member>
    </members>
</doc>
